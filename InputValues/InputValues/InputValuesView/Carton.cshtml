@model CooverBoxWebApplication.InputValues.InputValuesInfo.CartonInputValue
@{
    Layout = null;

}
@inject CooverBoxWebApplication.Services.MaterialsService materials
@{ 
    IEnumerable<CooverBoxWebApplication.Models.CoverCarton> cartons = materials.CoverCartons;
    switch (Model.TypeUsing)
    {
        case CooverBoxWebApplication.Models.CartonTypeUsing.Cover: cartons = cartons.Where(p => p.Cover).ToList(); break;
        case CooverBoxWebApplication.Models.CartonTypeUsing.Circle: cartons = cartons.Where(p => p.Circle).ToList(); break;
        case CooverBoxWebApplication.Models.CartonTypeUsing.CorrugatedBoard: cartons = cartons.Where(p => p.CorrugatedBoard).ToList(); break;
    }
}
<div class="form-group col-auto row">
    <label class="control-label  col-md-3 col-xs-12" for="@Model.Name">@Model.DisplayName</label>
    <div class="col-md-9 col-xs-12">
        <select class="form-control" type="text"
                id=@Model.Name name=@Model.Name>
            @if (!string.IsNullOrEmpty(Model.AddOption))
            {
                <option value="@Model.AddOption">@Model.AddOption</option>

            }
            @foreach (var carton in cartons)
            {
                <option @Html.Raw((Model.AlwaysDefault == false && Model.GetValue(ViewBag._model)?.Id == carton.Id) ? "selected" : "") value="@carton.Id">@($"{carton.Name} {carton.Thickness}мм")</option>
            }

        </select>
    </div>
</div>